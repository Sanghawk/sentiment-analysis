services:
  db: # NO BUENO
    image: postgres:15-alpine
    container_name: postgres_db
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  db_v2: # BUENO
    image: pgvector/pgvector:pg16
    container_name: postgres_db_v2
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_v2:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: fastapi_service
    restart: always
    depends_on:
      db_v2:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "8000:8000"
      - "5678:5678" # Debug port

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: nextjs_service
    restart: always
    depends_on:
      - api
    env_file:
      - .env
    ports:
      - "3000:3000"
  
  # RabbitMQ Service
  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq_etl
    restart: always
    ports:
      - "5672:5672"   # RabbitMQ messaging port
      - "15672:15672" # RabbitMQ Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  producer:
    build: 
      context: ./bandito
      dockerfile: Dockerfile
    container_name: producer
    depends_on:
      - rabbitmq
    command: python producer.py

  consumer:
    build: 
      context: ./bandito
      dockerfile: Dockerfile
    depends_on:
      db_v2:
        condition: service_healthy
    command: python consumer.py
    env_file:
      - .env
    deploy:
      replicas: 3   # Run 3 consumer instances

volumes:
  postgres_data:
  postgres_data_v2: